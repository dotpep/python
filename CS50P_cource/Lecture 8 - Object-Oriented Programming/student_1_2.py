# class —ç—Ç–æ –Ω–µ–∫–∏–π —á–µ—Ä—Ç–µ—ç –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ—É–Ω–∫—Ü–∏–π
# class - –º–æ–∂–Ω–æ —Å–æ–∑–¥–æ–≤–∞—Ç—å –æ–±—å–µ–∫—Ç—ã –∫–∞–∫ –≤ –§—É–Ω–∫—Ü–∏–π def - student –¥–∞–≤–∞—è –µ–º—É Student
# –∏ –ø–æ—Ç–æ–º –µ—â–µ –∏ –¥–∞–≤–∞—Ç—å –µ–º—É –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ/–∞—Ç—Ä–∏–±—É—Ç—ã —á–µ—Ä–µ–∑ .
class Student:
    def __init__(self, name, house, patronus):
        if not name:
            raise ValueError("Missing name")
        if house not in ["Gryffindor", "Hufflepuff", "Ravenclaw", "Slytherin", ]:
            raise ValueError("Invalid house")
        self.name = name
        self.house = house
        self.patronus = patronus

    def __str__(self):
        return f"{self.name} from {self.house}"
        # return "a student"

    def charm(self):
        match self.patronus:
            case "Stag":
                return "üê¥"
            case "Otter":
                return "ü¶â"
            case "Jack Russell terrier":
                return "üê∂"
            case _:
                return "/"


def main():
    student = get_student()
    print("Expecto Patronum!")
    print(student.charm())
    #     print(f"{student.name} from {student.house}")


def get_student():
    """
    student = Student()
    student.name = input("Name: ")
    student.house = input("House: ")
    return student
    """
    name = input("Name: ")
    house = input("House: ")
    patronus = input("Patronus: ")
    return Student(name, house, patronus)


if __name__ == "__main__":
    main()
